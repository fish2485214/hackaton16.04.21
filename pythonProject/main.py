import telebot
import config
from telebot import types

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("/status")
    item3 = types.KeyboardButton("/help")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ FPX/FRX –≤ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help(message):

    sti = open('static/negr.jpg', 'rb')
    bot.send_sticker(message.chat.id, sti)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("/status")
    item3 = types.KeyboardButton("/help")

    markup.add(item1, item2, item3)


    bot.send_message(message.chat.id,
                     "–ú—ã –±—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏\n\n–±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä '–°—É–µ—Ç–æ–ª–æ–≥–∏'\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É:\n–î–∞—Ä—å—è - \n–†—É—Å–ª–∞–Ω - \n–°—Ç–∞—Å - \n–ö–æ—Å—Ç—è - \n–î–∞–Ω–∏–ª–∞ - \n\n–°—Å—ã–ª–∫–∞ –Ω–∞ FastReports - https://fastreport.cloud\n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n/start\n/help\n/status\n".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['status'])
def status(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("/status")
    item3 = types.KeyboardButton("/help")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫–∏—Ü—è –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º)".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
#def lalala(message):
 #   if message.chat.type == 'private':
  #      if message.text == '/start':
   #         bot.send_message(commands=['start'])
    #    elif message.text == '/status':
     #       bot.send_message(commands=['status'])
      #  elif message.text == '/help':
       #     bot.send_message(commands=['help'])



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True)